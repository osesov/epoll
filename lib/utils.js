const BN = require('bn.js');
const _ = require('underscore');

// decodes Ethereum events array `logs`, generated by contract `contract`,
// additionally it could be filtered by `ev` event name.
exports.decodeLog = function(web3, contract, logs, ev) {
    let r = null;
    if (Array.isArray(logs)) {
        r = logs.map(log => {
            let desc = null
            log.topics.forEach( (e) => {
                if (desc == null) {
                    foundEvent = contract.jsonInterface.getEventBySignature(e);
                    if (ev == null || ev.includes(foundEvent.name))
                        desc = foundEvent;
                }
            });

            return desc ? web3.eth.abi.decodeLog(desc.getInputs(), log.data, log.topics.slice(1)) : null;
        }).filter( x=> x != null );
    }
    else if (logs != null) {
        const desc = _.find(contract._jsonInterface,
            o => o.type === "event" && logs.topics.includes(o.signature));
        r = desc ? web3.eth.abi.decodeLog(desc.inputs, logs.data, logs.topics.slice(1)) : null;
    }
    return r;
};

// Convert string address to the Web3 suitable Big Number.
exports.addressToNumber = function(address) {
    if (!address)
        return null;

    return new BN(address.replace(/^0x/, ""), "hex")
};
